from langchain.schema import HumanMessage, SystemMessage
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables from the .env file.
load_dotenv()

# Retrieve the OpenAI API key from environment variables.
openai_key = os.getenv("OPENAI_API_KEY")

# Initialize the language model with the specified API key and model name.
llm_name = "gpt-3.5-turbo"
model = ChatOpenAI(api_key=openai_key, model=llm_name)

# Define the initial system message to establish the context for the chatbot.
initial_messages = [
    SystemMessage(
        content="You are a chatbot with exceptional competence in data science. Your expertise spans data analysis, machine learning, and statistical modeling, enabling you to deliver valuable insights and innovative solutions."
    ),
    HumanMessage(content="What are you? And what is data science?"),
]

def chatbot_response(messages):
    """
    Invoke the chatbot model with the provided messages and return the generated response.
    
    Parameters:
    messages (list): A list of messages to be processed by the chatbot.

    Returns:
    HumanMessage: The response generated by the chatbot model.
    """
    try:
        response = model.invoke(messages)
        return response
    except Exception as e:
        print(f"An error occurred while generating the response: {e}")
        return HumanMessage(content="I'm sorry, but I couldn't process your request at this time.")

def run_chatbot():
    """
    Run the chatbot interaction loop, allowing the user to input queries 
    and receive responses until they choose to exit the session.
    """
    print("Welcome to the Data Science Chatbot! Type 'exit' to terminate the session.")
    
    # Start with initial messages to set context.
    messages = initial_messages.copy()
    
    while True:
        # Prompt the user for input.
        user_input = input("User: ").strip()
        
        # Exit condition for the session.
        if user_input.lower() == "exit":
            print("Session terminated. Goodbye!")
            break
        
        # Validate user input.
        if not user_input:
            print("Please enter a valid query.")
            continue
        
        # Inform the user that the chatbot is processing the request.
        print("Chatbot is processing your request...")
        
        # Append user input as a HumanMessage to the message list.
        messages.append(HumanMessage(content=user_input))
        
        # Get the response from the chatbot.
        response = chatbot_response(messages)
        
        # Inform the user that the response is being generated.
        print("Chatbot: Generating the response...")
        
        # Display the chatbot's response with improved formatting.
        print(f"Chatbot: {response.content}\n")

if __name__ == "__main__":
    run_chatbot()